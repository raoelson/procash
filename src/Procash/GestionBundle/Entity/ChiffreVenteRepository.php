<?php

namespace Procash\GestionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ChiffreVenteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChiffreVenteRepository extends EntityRepository {

    public function getListeSaisieParDateEdition($reseau, $dateEdition) {
        $qB = $this->createQueryBuilder('s')
                ->innerJoin('s.reseau', 'r')
                ->where('s.dateEdition = :dateEdition')
                ->andWhere('r.id = :idreseau')
                ->setParameter('dateEdition', $dateEdition)
                ->setParameter('idreseau', $reseau);
        $qry = $qB->getQuery();
        return $qry->getResult();
    }

    public function getListeSaisie($client, $produit) {
        $now = new \DateTime();
        $fourDaysAgo = $now->sub(new \DateInterval("P4D"));
        $now = date_format($now, "Y-m-d");
        $fourDaysAgo = date_format($fourDaysAgo, "Y-m-d");
        $qb = $this->createQueryBuilder('s');
        $qb->innerJoin('s.client', 'c')
                ->innerJoin('s.produit', 'p')
                ->where('s.date BETWEEN :to AND :from')
                ->andWhere('c.id = :client')
                ->andWhere('p.id = :produit')
                ->setParameters(
                        array(
                            'from' => $fourDaysAgo,
                            'to' => $now,
                            'produit' => $produit->getId(),
                            'client' => $client->getId()
                        )
        );
        return $qb->getQuery()->getResult();
    }

    public function getListeChiffreVenteParDateEtClient($client, $dateFact) {
        $dateF = date_format($dateFact, "Y-m-d");
        $qb = $this->createQueryBuilder('c');
        $qb->innerJoin('c.client', 'cl')
                ->where('cl.id = :client')
                ->andWhere('c.date = :dateFac')
                ->andWhere('c.dateSuppression is NULL')
                ->setParameter('dateFac', $dateF)
                ->setParameter('client', $client);
        return $qb->getQuery()->getResult();
    }

    public function getListeHistoriqueRegulChiffreVente($idParent) {
        $qb = $this->createQueryBuilder('c');
        $qb->where('c.idParent =:idCVParent')
                //  ->andWhere('c.dateSuppression is not NULL')
                ->setParameter('idCVParent', $idParent);

        return $qb->getQuery()->getResult();
    }

    public function getDetailsFacturationQuotidienPar($idClient, $dateFacture) {
        $code = 20;
        $qb = $this->createQueryBuilder('d');
        $qb->innerJoin('d.produit', 'p')
                ->innerJoin('d.client', 'c')
                ->where('c.id =:idClient')
                ->andWhere($qb->expr()->like('p.code', ':code'))
                ->andWhere($qb->expr()->like('d.date', ':date'))
                ->setParameter('idClient', $idClient)
                ->setParameter('date', '%'.$dateFacture.'%')
                ->setParameter('code', $code);

        return $qb->getQuery()->getResult();
    }

    public function getDetailsFacturationVisuPar($idClient, $dateFacture) {
        $code = 21;
        $qb = $this->createQueryBuilder('d');
        $qb->innerJoin('d.produit', 'p')
                ->innerJoin('d.client', 'c')
                ->where('c.id =:idClient')
                ->andWhere($qb->expr()->like('p.code', ':code'))
                ->andWhere($qb->expr()->like('d.date', ':date'))
                ->setParameter('idClient', $idClient)
                ->setParameter('date', '%'.$dateFacture.'%')
                ->setParameter('code', $code);

        return $qb->getQuery()->getResult();
    }

}
